// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SOM.BDD.Features.Obra
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("3.1.3 - Excluir Obra", new string[] {
            "kill_Driver",
            "Obra",
            "ExcluirObraEComposicao"}, SourceFile="Features\\Obra\\3.1.3 - Excluir Obra.feature", SourceLine=6)]
    public partial class _3_1_3_ExcluirObraFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "3.1.3 - Excluir Obra.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "3.1.3 - Excluir Obra", null, ProgrammingLanguage.CSharp, new string[] {
                        "kill_Driver",
                        "Obra",
                        "ExcluirObraEComposicao"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
    testRunner.Given("que esteja logado no sistema SOM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
        }
        
        public virtual void ExcluirObra(string tIPO, string tITULOALTERNATIVO, string iSWC, string aNO, string oBRAORIGINAL, string nACIONALIDADE, string pAIS, string dOMINIOPUBLICO, string iNSTITUCIONAL, string bLACKLIST, string eMBLEMATICA, string mENSAGEM, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "ExcluirObraEComposicaoCT01"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Excluir Obra", null, @__tags);
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 14
 testRunner.Given(string.Format("que tenha uma obra cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, " +
                        "{8}, {9}, {10}", tIPO, tITULOALTERNATIVO, iSWC, aNO, oBRAORIGINAL, nACIONALIDADE, pAIS, dOMINIOPUBLICO, iNSTITUCIONAL, bLACKLIST, eMBLEMATICA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 15
 testRunner.When("excluo essa obra", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.Then(string.Format("visualizo a mensagem de obra excluida com sucesso {0}", mENSAGEM), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Excluir Obra, \"MUSICA COMERCIAL\"", new string[] {
                "chrome",
                "ExcluirObraEComposicaoCT01"}, SourceLine=19)]
        public virtual void ExcluirObra_MUSICACOMERCIAL()
        {
#line 13
this.ExcluirObra("\"MUSICA COMERCIAL\"", "\"TITULOALTERNATIVO OBRA 507\"", "\" \"", "\"2018\"", "\"Sim\"", "\"Nacional\"", "\" \"", "\"Não\"", "\"Não\"", "\"Não\"", "\"Não\"", "\"Registro excluído com sucesso.\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
