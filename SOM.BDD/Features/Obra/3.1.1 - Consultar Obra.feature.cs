// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SOM.BDD.Features.Obra
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("3.1.1 - Consultar detalhe da Obra", new string[] {
            "kill_Driver",
            "Obra",
            "ConsultarObraEComposicao"}, SourceFile="Features\\Obra\\3.1.1 - Consultar Obra.feature", SourceLine=6)]
    public partial class _3_1_1_ConsultarDetalheDaObraFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "3.1.1 - Consultar Obra.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "3.1.1 - Consultar detalhe da Obra", null, ProgrammingLanguage.CSharp, new string[] {
                        "kill_Driver",
                        "Obra",
                        "ConsultarObraEComposicao"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("que esteja logado no sistema SOM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
    testRunner.And("que esteja na tela de Obras", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
        }
        
        public virtual void ConsultaAvancadaPorObraCadastradaNoSistema(string tITULO, string sUBTITULO, string aUTOR, string tITULOALTERNATIVO, string tIPO, string dDA, string nACIONALIDADE, string dOMINIOPUBLICO, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "ConsultarObraEComposicaoCT01"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consulta Avançada por Obra cadastrada no sistema", null, @__tags);
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 15
 testRunner.When(string.Format("faço uma busca avancada por uma obra {0}, {1}, {2}, {3}, {4}, {5}", tITULO, sUBTITULO, aUTOR, tITULOALTERNATIVO, tIPO, dDA), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.Then(string.Format("visualizo a obra cadastrada no resultado da busca com sucesso {0}, {1}, {2}, {3}," +
                        " {4}, {5}", tITULO, aUTOR, dDA, nACIONALIDADE, tIPO, dOMINIOPUBLICO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Consulta Avançada por Obra cadastrada no sistema, \"TITULO CONSULTA SIMPLES\"", new string[] {
                "chrome",
                "ConsultarObraEComposicaoCT01"}, SourceLine=19)]
        public virtual void ConsultaAvancadaPorObraCadastradaNoSistema_TITULOCONSULTASIMPLES()
        {
#line 14
this.ConsultaAvancadaPorObraCadastradaNoSistema("\"TITULO CONSULTA SIMPLES\"", "\"SUBTITULO CONSULTA SIMPLES\"", "\"TESTE INM Autor\"", "\" \"", "\"BIBLIOTECA MUSICAL\"", "\"KOBALT MUSIC\"", "\"Nacional\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ConsultaSimplesPorObraCadastradaNoSistema(string tITULO, string aUTOR, string tIPO, string dDA, string nACIONALIDADE, string dOMINIOPUBLICO, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "ConsultarObraEComposicaoCT02"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consulta Simples por Obra cadastrada no sistema", null, @__tags);
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 24
 testRunner.When(string.Format("faço uma busca simples por uma obra {0}", tITULO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 25
 testRunner.Then(string.Format("visualizo a obra cadastrada no resultado da busca com sucesso {0}, {1}, {2}, {3}," +
                        " {4}, {5}", tITULO, aUTOR, dDA, nACIONALIDADE, tIPO, dOMINIOPUBLICO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Consulta Simples por Obra cadastrada no sistema, \"TITULO CONSULTA SIMPLES\"", new string[] {
                "chrome",
                "ConsultarObraEComposicaoCT02"}, SourceLine=28)]
        public virtual void ConsultaSimplesPorObraCadastradaNoSistema_TITULOCONSULTASIMPLES()
        {
#line 23
this.ConsultaSimplesPorObraCadastradaNoSistema("\"TITULO CONSULTA SIMPLES\"", "\"TESTE INM Autor\"", "\"BIBLIOTECA MUSICAL\"", "\"KOBALT MUSIC\"", "\"Nacional\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ConsultarDetalheDeObraComFonograma(string obra, string interpretes, string produtor_Fonografico, string submix, string iSRC, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "ConsultarObraEComposicaoCT03"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consultar detalhe de obra com fonograma", null, @__tags);
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 33
 testRunner.When(string.Format("faço uma busca simples por uma obra {0}", obra), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 34
    testRunner.Then(string.Format("visualizo a grid com os campos {0}, {1}, {2}, {3} preenchido com os dados do fono" +
                        "grama {4}", interpretes, produtor_Fonografico, submix, iSRC, obra), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Consultar detalhe de obra com fonograma, \"MUSICA DA HELEN1\"", new string[] {
                "chrome",
                "ConsultarObraEComposicaoCT03"}, SourceLine=37)]
        public virtual void ConsultarDetalheDeObraComFonograma_MUSICADAHELEN1()
        {
#line 32
this.ConsultarDetalheDeObraComFonograma("\"MUSICA DA HELEN1\"", "\"ANITTA\"", "\"RGE\"", "\"FULL MIX\"", "\"BRRGE10101010\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
