// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SOM.BDD.Features.Pagamento.Pedido
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("6.1.7 - Criar Pedido Manualmente", new string[] {
            "kill_Driver",
            "CriarPedidoManual",
            "Pedidos"}, SourceFile="Features\\Pagamento\\Pedido\\6.1.7 - Criar Pedido Manualmente.feature", SourceLine=6)]
    public partial class _6_1_7_CriarPedidoManualmenteFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "6.1.7 - Criar Pedido Manualmente.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "6.1.7 - Criar Pedido Manualmente", null, ProgrammingLanguage.CSharp, new string[] {
                        "kill_Driver",
                        "CriarPedidoManual",
                        "Pedidos"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("que esteja logado no sistema SOM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
        }
        
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo(string sincronismo, string dataExibicao, string interprete, string tempo, string midiaADebitar, string status, string statusPav, string reprise, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "CriarPedidoManualCT01"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar pedido manual para todos os tipos de sincronismo", null, @__tags);
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 14
 testRunner.Given("que tenha um produto e uma obra cadastrada no sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 15
 testRunner.And("que estou na tela de criação de pedidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 16
 testRunner.When(string.Format("crio um novo pedido manualmente {0}, {1}, {2} {3}", dataExibicao, tempo, midiaADebitar, sincronismo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 17
 testRunner.Then(string.Format("visualizo o pedido gerado com sucesso {0}, {1}, {2}, {3}, {4}", midiaADebitar, sincronismo, status, statusPav, reprise), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"ABERTURA\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_ABERTURA()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"ABERTURA\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"ABERTURA PONTUAL\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_ABERTURAPONTUAL()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"ABERTURA PONTUAL\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"ADORNO\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_ADORNO()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"ADORNO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"AO VIVO ADORNO\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_AOVIVOADORNO()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"AO VIVO ADORNO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"AO VIVO FUNDO\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_AOVIVOFUNDO()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"AO VIVO FUNDO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"AO VIVO FUNDO EM JORNALI" +
            "SMO\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_AOVIVOFUNDOEMJORNALISMO()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"AO VIVO FUNDO EM JORNALISMO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"AO VIVO PERFORMANCE\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_AOVIVOPERFORMANCE()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"AO VIVO PERFORMANCE\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"ENCERRAMENTO\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_ENCERRAMENTO()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"ENCERRAMENTO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de sincronismo, \"ENCERRAMENTO PONTUAL\"", new string[] {
                "chrome",
                "CriarPedidoManualCT01"}, SourceLine=20)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeSincronismo_ENCERRAMENTOPONTUAL()
        {
#line 13
this.GerarPedidoManualParaTodosOsTiposDeSincronismo("\"ENCERRAMENTO PONTUAL\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"GLOBONEWS\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar(string midiaADebitar, string sincronismo, string dataExibicao, string interprete, string tempo, string status, string statusPav, string reprise, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "CriarPedidoManualCT02"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar pedido manual para todos os tipos de midia a debitar", null, @__tags);
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 33
    testRunner.Given("que tenha um produto e uma obra cadastrada no sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 34
 testRunner.And("que estou na tela de criação de pedidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.When(string.Format("crio um novo pedido manualmente {0}, {1}, {2} {3}", dataExibicao, tempo, midiaADebitar, sincronismo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 36
 testRunner.Then(string.Format("visualizo o pedido gerado com sucesso {0}, {1}, {2}, {3}, {4}", midiaADebitar, sincronismo, status, statusPav, reprise), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"GLOBONEWS\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_GLOBONEWS()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"GLOBONEWS\"", "\"ABERTURA\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"CANAL VIVA\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_CANALVIVA()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"CANAL VIVA\"", "\"ABERTURA PONTUAL\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"DNI\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_DNI()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"DNI\"", "\"ADORNO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"TV\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_TV()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"TV\"", "\"AO VIVO ADORNO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"GLOBOPLAY\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_GLOBOPLAY()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"GLOBOPLAY\"", "\"AO VIVO FUNDO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"GLOOB\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_GLOOB()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"GLOOB\"", "\"AO VIVO FUNDO EM JORNALISMO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"INTERNET\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_INTERNET()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"INTERNET\"", "\"AO VIVO PERFORMANCE\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"MULTISHOW\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_MULTISHOW()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"MULTISHOW\"", "\"ENCERRAMENTO\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"SPORTV\"", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_SPORTV()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"SPORTV\"", "\"ENCERRAMENTO PONTUAL\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Gerar pedido manual para todos os tipos de midia a debitar, \"CANAL INTERNACIONAL\"" +
            "", new string[] {
                "chrome",
                "CriarPedidoManualCT02"}, SourceLine=39)]
        public virtual void GerarPedidoManualParaTodosOsTiposDeMidiaADebitar_CANALINTERNACIONAL()
        {
#line 32
this.GerarPedidoManualParaTodosOsTiposDeMidiaADebitar("\"CANAL INTERNACIONAL\"", "\"ENCERRAMENTO PONTUAL\"", "\"10/10/2018\"", "\"ANITTA\"", "\"10\"", "\"Em andamento\"", "\"Não requerido\"", "\"Não\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void CriarPedidoSemTabelaVigente(string midiaADebitar, string sincronismo, string dataExibicao, string tempo, string mensagem, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "CriarPedidoManualCT03"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Criar Pedido sem Tabela Vigente", null, @__tags);
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 53
 testRunner.Given("que tenha um produto e uma obra cadastrada no sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 54
 testRunner.And("que estou na tela de criação de pedidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 55
 testRunner.When(string.Format("crio um novo pedido manualmente {0}, {1}, {2} {3}", dataExibicao, tempo, midiaADebitar, sincronismo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 56
 testRunner.Then(string.Format("eu visualizo a mensagem de critica informando que o pedido não pode ser criado pa" +
                        "ra essa data {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Criar Pedido sem Tabela Vigente, \"CANAL INTERNACIONAL\"", new string[] {
                "chrome",
                "CriarPedidoManualCT03"}, SourceLine=59)]
        public virtual void CriarPedidoSemTabelaVigente_CANALINTERNACIONAL()
        {
#line 52
this.CriarPedidoSemTabelaVigente("\"CANAL INTERNACIONAL\"", "\"ABERTURA\"", "\"10/10/2030\"", "\"10\"", "\"O pedido não pode ser gerado pois não foi encontrada tabela padrão no sistema.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void TodosOsItensComAutoresContratados(string mensagem, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "CriarPedidoManualCT04"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Todos os itens com autores contratados", null, @__tags);
#line 63
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 64
 testRunner.Given("que tenha um produto e uma obra cadastrada no sistema com autores contratados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 65
 testRunner.And("que estou na tela de criação de pedidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 66
 testRunner.When("crio um novo pedido manualmente para uma obra com autores contratados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 67
 testRunner.Then(string.Format("eu visualizo a mensagem de critica informando que o pedido não pode ser criado pa" +
                        "ra essa obra {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Todos os itens com autores contratados, \"Não foi possível gerar o pedido, pois to" +
            "dos os autores da obra são contratados ou falecidos a mais de 70 anos.\"", new string[] {
                "chrome",
                "CriarPedidoManualCT04"}, SourceLine=70)]
        public virtual void TodosOsItensComAutoresContratados_NaoFoiPossivelGerarOPedidoPoisTodosOsAutoresDaObraSaoContratadosOuFalecidosAMaisDe70Anos_()
        {
#line 63
this.TodosOsItensComAutoresContratados("\"Não foi possível gerar o pedido, pois todos os autores da obra são contratados o" +
                    "u falecidos a mais de 70 anos.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ObraDeDominioPublico(string mensagem, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "CriarPedidoManualCT05"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Obra de domínio público", null, @__tags);
#line 74
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 75
 testRunner.Given("que tenha um produto e uma obra de dominio publico cadastrada no sistema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 76
 testRunner.And("que estou na tela de criação de pedidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 77
 testRunner.When("crio um novo pedido manualmente para uma obra de dominio publico", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 78
 testRunner.Then(string.Format("eu visualizo a mensagem de critica informando que o pedido não pode ser criado pa" +
                        "ra essa obra {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Obra de domínio público, \"Não é possível gerar pedido pois esta obra é de Domínio" +
            " Público.\"", new string[] {
                "chrome",
                "CriarPedidoManualCT05"}, SourceLine=81)]
        public virtual void ObraDeDominioPublico_NaoEPossivelGerarPedidoPoisEstaObraEDeDominioPublico_()
        {
#line 74
this.ObraDeDominioPublico("\"Não é possível gerar pedido pois esta obra é de Domínio Público.\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Cadastro de Intérprete", new string[] {
                "chrome",
                "CriarPedidoManualCT06"}, SourceLine=84)]
        public virtual void CadastroDeInterprete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastro de Intérprete", null, new string[] {
                        "chrome",
                        "CriarPedidoManualCT06"});
#line 85
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
this.FeatureBackground();
#line 86
 testRunner.Given("que estou na tela de criação de pedidos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 87
 testRunner.When("cadastro um novo interprete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 88
    testRunner.Then("visualizo a mensagem de Intérprete cadastrado com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
