// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SOM.BDD.Features.Pagamento.Pedido
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Bloquear edição de item de pedido", new string[] {
            "kill_Driver",
            "Pedido",
            "BloquearEdicaoDePedido"}, SourceFile="Features\\Pagamento\\Pedido\\Bloquear edição de item de pedido.feature", SourceLine=5)]
    public partial class BloquearEdicaoDeItemDePedidoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Bloquear edição de item de pedido.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Bloquear edição de item de pedido", null, ProgrammingLanguage.CSharp, new string[] {
                        "kill_Driver",
                        "Pedido",
                        "BloquearEdicaoDePedido"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
    testRunner.Given("que esteja logado no sistema SOM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bloquear alteração de pedidos que estão aguardando aprovação quando é alterado o " +
            "DDA da Obra", new string[] {
                "chrome",
                "BloquearEdicaoDePedidoCT01"}, SourceLine=11)]
        public virtual void BloquearAlteracaoDePedidosQueEstaoAguardandoAprovacaoQuandoEAlteradoODDADaObra()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bloquear alteração de pedidos que estão aguardando aprovação quando é alterado o " +
                    "DDA da Obra", null, new string[] {
                        "chrome",
                        "BloquearEdicaoDePedidoCT01"});
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 13
 testRunner.Given("que tenha um pedido previamente cadastrado no sistema com apenas um autor na comp" +
                    "osição", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 14
 testRunner.And("que possua um item que esteja aguardando aprovação para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
 testRunner.When("altero o DDA da Obra que possui um pedido que esteja aguardando aprovação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.Then("nao visualizo o pedido aguardando aprovacao na lista de pedidos a serem afetados " +
                    "pela auteração", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bloquear alteração de pedidos que estão aguardando aprovação quando é alterado o " +
            "Autor da Obra", new string[] {
                "chrome",
                "BloquearEdicaoDePedidoCT02"}, SourceLine=18)]
        public virtual void BloquearAlteracaoDePedidosQueEstaoAguardandoAprovacaoQuandoEAlteradoOAutorDaObra()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bloquear alteração de pedidos que estão aguardando aprovação quando é alterado o " +
                    "Autor da Obra", null, new string[] {
                        "chrome",
                        "BloquearEdicaoDePedidoCT02"});
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 20
 testRunner.Given("que tenha um pedido previamente cadastrado no sistema com apenas um autor na comp" +
                    "osição", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 21
 testRunner.And("que possua um item que esteja aguardando aprovação para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 22
 testRunner.When("altero o Autor da Obra que possui um pedido que esteja aguardando aprovação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 23
 testRunner.Then("nao visualizo o pedido aguardando aprovacao na lista de pedidos a serem afetados " +
                    "pela auteração", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bloquear alteração de pedidos que estão aguardando aprovação quando tentar inclui" +
            "r itens para DNI", new string[] {
                "chrome",
                "BloquearEdicaoDePedidoCT03"}, SourceLine=25)]
        public virtual void BloquearAlteracaoDePedidosQueEstaoAguardandoAprovacaoQuandoTentarIncluirItensParaDNI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bloquear alteração de pedidos que estão aguardando aprovação quando tentar inclui" +
                    "r itens para DNI", null, new string[] {
                        "chrome",
                        "BloquearEdicaoDePedidoCT03"});
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 27
 testRunner.Given("que tenha um pedido previamente cadastrado no sistema com apenas um autor na comp" +
                    "osição", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 28
 testRunner.And("que possua um item que esteja aguardando aprovação para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 29
 testRunner.When("tento cadastrar novos itens de DNI para o pedido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 30
 testRunner.Then("visualizo apenas o item do pedido na tela de detalhes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
