// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SOM.BDD.Features.UsoEReporte.Cue_Sheet
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("5.2.12 - Aprovar e revogar aprovação de item cue-sheet", new string[] {
            "kill_Driver",
            "AprovarERevogarItemCueSheet"}, SourceFile="Features\\UsoEReporte\\Cue-Sheet\\5.2.12 - Aprovar e revogar aprovação de item Cue-S" +
        "heet.feature", SourceLine=5)]
    public partial class _5_2_12_AprovarERevogarAprovacaoDeItemCue_SheetFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "5.2.12 - Aprovar e revogar aprovação de item Cue-Sheet.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt"), "5.2.12 - Aprovar e revogar aprovação de item cue-sheet", null, ProgrammingLanguage.CSharp, new string[] {
                        "kill_Driver",
                        "AprovarERevogarItemCueSheet"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
      testRunner.Given("que esteja logado no sistema SOM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
        }
        
        public virtual void AprovarUmItemComSucesso(string produto, string episodio, string capitulo, string midia, string dia, string mes, string ano, string repriseRebatida, string obra, string utilizacao, string sincronismo, string tempo, string interprete, string percentual, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT01"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aprovar um item com sucesso", null, @__tags);
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 13
 testRunner.Given(string.Format("que tenha uma Cue-Sheet cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, " +
                        "{7}", produto, episodio, capitulo, midia, dia, mes, ano, repriseRebatida), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 14
 testRunner.And(string.Format("que tenha um item cadastrado na Cue-Sheet {0}, {1}, {2}, {3}, {4}", obra, utilizacao, sincronismo, tempo, interprete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
 testRunner.When(string.Format("aprovo um item da Cue-Sheet {0}", obra), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 16
 testRunner.Then(string.Format("visualizo o percentual de aprovação da Cue-Sheet alterado {0}", percentual), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Aprovar um item com sucesso, \"Aleatório\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT01"}, SourceLine=19)]
        public virtual void AprovarUmItemComSucesso_Aleatorio()
        {
#line 12
this.AprovarUmItemComSucesso("\"Aleatório\"", "\"Aleatório\"", "\"01\"", "\"GLOBONEWS\"", "\"12\"", "\"12\"", "\"2018\"", "\"Não\"", "\"Aleatório\"", "\"BK – BACKGROUND\"", "\"ABERTURA\"", "\"16\"", "\" \"", "\" 100,00%\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void ValidarAprovacaoDeItensComStatusPendente(string produto, string episodio, string capitulo, string midia, string dia, string mes, string ano, string repriseRebatida, string obra, string utilizacao, string sincronismo, string tempo, string interprete, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT02"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validar aprovação de itens com status Pendente", null, @__tags);
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 24
    testRunner.Given(string.Format("que tenha uma Cue-Sheet cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, " +
                        "{7}", produto, episodio, capitulo, midia, dia, mes, ano, repriseRebatida), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 25
 testRunner.And(string.Format("que tenha um item cadastrado na Cue-Sheet sem Interprete {0}, {1}, {2}, {3}, {4}", obra, utilizacao, sincronismo, tempo, interprete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 26
 testRunner.Then("visualizo uma mensagem de alerta informando que o item não pode ser aprovado devi" +
                    "do a pendencia do Interprete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validar aprovação de itens com status Pendente, \"Aleatório\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT02"}, SourceLine=29)]
        public virtual void ValidarAprovacaoDeItensComStatusPendente_Aleatorio()
        {
#line 23
this.ValidarAprovacaoDeItensComStatusPendente("\"Aleatório\"", "\"Aleatório\"", "\"01\"", "\"GLOBONEWS\"", "\"12\"", "\"12\"", "\"2018\"", "\"Não\"", "\"Aleatório\"", "\"BK – BACKGROUND\"", "\"ABERTURA\"", "\"16\"", "\" \"", ((string[])(null)));
#line hidden
        }
        
        public virtual void AprovarVariosItensSemImpedimento(
                    string produto, 
                    string episodio, 
                    string capitulo, 
                    string midia, 
                    string dia, 
                    string mes, 
                    string ano, 
                    string repriseRebatida, 
                    string obra, 
                    string obra2, 
                    string utilizacao, 
                    string sincronismo, 
                    string tempo, 
                    string interprete, 
                    string mensagem, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT03"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aprovar vários itens sem impedimento", null, @__tags);
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 34
 testRunner.Given(string.Format("que tenha uma Cue-Sheet cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, " +
                        "{7}", produto, episodio, capitulo, midia, dia, mes, ano, repriseRebatida), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 35
 testRunner.And(string.Format("que tenha dois itens cadastrados na Cue-Sheet {0}, {1}, {2}, {3}, {4}, {5}", obra, obra2, utilizacao, sincronismo, tempo, interprete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 36
 testRunner.When(string.Format("aprovo dois itens cadastrados na Cue-Sheet {0}, {1}", obra, obra2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 37
 testRunner.Then(string.Format("visualizo os itens aprovados na Cue-Sheet com sucesso {0}, {1}", obra, obra2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Aprovar vários itens sem impedimento, \"Aleatório\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT03"}, SourceLine=40)]
        public virtual void AprovarVariosItensSemImpedimento_Aleatorio()
        {
#line 33
this.AprovarVariosItensSemImpedimento("\"Aleatório\"", "\"Aleatório\"", "\"01\"", "\"GLOBONEWS\"", "\"12\"", "\"12\"", "\"2018\"", "\"Não\"", "\"Aleatório\"", "\"TESTE INMETRICS\"", "\"BK – BACKGROUND\"", "\"ABERTURA\"", "\"16\"", "\" \"", "\"Registros excluídos com sucesso.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void RevogarItemComSucesso(string produto, string episodio, string capitulo, string midia, string dia, string mes, string ano, string repriseRebatida, string obra, string utilizacao, string sincronismo, string tempo, string interprete, string percentual, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT04"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revogar item com sucesso", null, @__tags);
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 45
 testRunner.Given(string.Format("que tenha uma Cue-Sheet cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, " +
                        "{7}", produto, episodio, capitulo, midia, dia, mes, ano, repriseRebatida), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 46
 testRunner.And(string.Format("que tenha um item cadastrado na Cue-Sheet {0}, {1}, {2}, {3}, {4}", obra, utilizacao, sincronismo, tempo, interprete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 47
 testRunner.When(string.Format("aprovo um item da Cue-Sheet {0}", obra), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 48
 testRunner.And(string.Format("revogo a aprovação de um item da Cue-Sheet {0}", obra), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 49
 testRunner.Then(string.Format("visualizo o percentual de aprovação da Cue-Sheet alterado {0}", percentual), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Revogar item com sucesso, \"Aleatório\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT04"}, SourceLine=52)]
        public virtual void RevogarItemComSucesso_Aleatorio()
        {
#line 44
this.RevogarItemComSucesso("\"Aleatório\"", "\"Aleatório\"", "\"01\"", "\"GLOBONEWS\"", "\"12\"", "\"12\"", "\"2018\"", "\"Não\"", "\"Aleatório\"", "\"BK – BACKGROUND\"", "\"ABERTURA\"", "\"16\"", "\" \"", "\" 0,00%\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void RevogarVariosItens(
                    string produto, 
                    string episodio, 
                    string capitulo, 
                    string midia, 
                    string dia, 
                    string mes, 
                    string ano, 
                    string repriseRebatida, 
                    string obra, 
                    string obra2, 
                    string utilizacao, 
                    string sincronismo, 
                    string tempo, 
                    string interprete, 
                    string percentual, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT05"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revogar vários itens", null, @__tags);
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 57
 testRunner.Given(string.Format("que tenha uma Cue-Sheet cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, " +
                        "{7}", produto, episodio, capitulo, midia, dia, mes, ano, repriseRebatida), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 58
 testRunner.And(string.Format("que tenha dois itens cadastrados na Cue-Sheet {0}, {1}, {2}, {3}, {4}, {5}", obra, obra2, utilizacao, sincronismo, tempo, interprete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 59
 testRunner.When(string.Format("aprovo dois itens cadastrados na Cue-Sheet {0}, {1}", obra, obra2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 60
 testRunner.And(string.Format("revogo a aprovação de dois itens da Cue-Sheet {0}, {1}", obra, obra2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 61
 testRunner.Then(string.Format("visualizo o percentual de aprovação da Cue-Sheet alterado {0}", percentual), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Revogar vários itens, \"Aleatório\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT05"}, SourceLine=64)]
        public virtual void RevogarVariosItens_Aleatorio()
        {
#line 56
this.RevogarVariosItens("\"Aleatório\"", "\"Aleatório\"", "\"01\"", "\"GLOBONEWS\"", "\"12\"", "\"12\"", "\"2018\"", "\"Não\"", "\"Aleatório\"", "\"TESTE INMETRICS\"", "\"BK – BACKGROUND\"", "\"ABERTURA\"", "\"16\"", "\" \"", "\" 0,00%\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void AprovarTodosOsItensComSucesso(
                    string produto, 
                    string episodio, 
                    string capitulo, 
                    string midia, 
                    string dia, 
                    string mes, 
                    string ano, 
                    string repriseRebatida, 
                    string obra, 
                    string obra2, 
                    string utilizacao, 
                    string sincronismo, 
                    string tempo, 
                    string interprete, 
                    string mensagem, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT06"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aprovar todos os itens com sucesso", null, @__tags);
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 69
 testRunner.Given(string.Format("que tenha uma Cue-Sheet cadastrada no sistema {0}, {1}, {2}, {3}, {4}, {5}, {6}, " +
                        "{7}", produto, episodio, capitulo, midia, dia, mes, ano, repriseRebatida), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 70
 testRunner.And(string.Format("que tenha dois itens cadastrados na Cue-Sheet {0}, {1}, {2}, {3}, {4}, {5}", obra, obra2, utilizacao, sincronismo, tempo, interprete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 71
 testRunner.When(string.Format("aprovo dois itens cadastrados na Cue-Sheet {0}, {1}", obra, obra2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 72
 testRunner.Then(string.Format("visualizo os itens aprovados na Cue-Sheet com sucesso {0}, {1}", obra, obra2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Aprovar todos os itens com sucesso, \"Aleatório\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT06"}, SourceLine=75)]
        public virtual void AprovarTodosOsItensComSucesso_Aleatorio()
        {
#line 68
this.AprovarTodosOsItensComSucesso("\"Aleatório\"", "\"Aleatório\"", "\"01\"", "\"GLOBONEWS\"", "\"12\"", "\"12\"", "\"2018\"", "\"Não\"", "\"Aleatório\"", "\"TESTE INMETRICS\"", "\"BK – BACKGROUND\"", "\"ABERTURA\"", "\"16\"", "\" \"", "\"Registros excluídos com sucesso.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void RevogarItensComPedidosEmAberto(string mensagem, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT07"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revogar itens com pedidos em aberto", null, @__tags);
#line 80
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 81
 testRunner.Given("que tenha uma Cue-Sheet cadastrada com dois pedidos gerados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 82
 testRunner.When("revogo a aprovação dos dois itens com pedidos pendentes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 83
 testRunner.Then(string.Format("visualizo a mensagem que a aprovação foi revogada e os itens estão liberados para" +
                        " edição {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Revogar itens com pedidos em aberto, \"A aprovação foi revogada e o item liberado " +
            "para edição.\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT07"}, SourceLine=86)]
        public virtual void RevogarItensComPedidosEmAberto_AAprovacaoFoiRevogadaEOItemLiberadoParaEdicao_()
        {
#line 80
this.RevogarItensComPedidosEmAberto("\"A aprovação foi revogada e o item liberado para edição.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void RevogarItensEnviadosParaPagamento(string mensagem, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "chrome",
                    "AprovarERevogarItemCueSheetCT08"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revogar itens enviados para pagamento", null, @__tags);
#line 90
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 91
 testRunner.Given("que tenha uma Cue-Sheet cadastrada com dois pedidos gerados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 92
 testRunner.And("que tenha um item com pedido enviado para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 93
 testRunner.When("revogo o item com pedido enviado para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 94
 testRunner.Then(string.Format("visualizo a mensagem que a aprovação foi revogada e os itens estão liberados para" +
                        " edição {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Revogar itens enviados para pagamento, \"A aprovação foi revogada e o item liberad" +
            "o para edição.\"", new string[] {
                "chrome",
                "AprovarERevogarItemCueSheetCT08"}, SourceLine=97)]
        public virtual void RevogarItensEnviadosParaPagamento_AAprovacaoFoiRevogadaEOItemLiberadoParaEdicao_()
        {
#line 90
this.RevogarItensEnviadosParaPagamento("\"A aprovação foi revogada e o item liberado para edição.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void RevogarItensEnviadosAoECAD(string mensagem, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revogar itens enviados ao ECAD", null, exampleTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 101
    testRunner.Given("que tenha uma Cue-Sheet cadastrada com dois pedidos gerados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 102
 testRunner.And("que tenha um item com pedido enviado para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 103
 testRunner.When("revogo o item com pedido enviado para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 104
 testRunner.Then(string.Format("visualizo a mensagem que a aprovação foi revogada e os itens estão liberados para" +
                        " edição {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Revogar itens enviados ao ECAD, \"A aprovação foi revogada e o item liberado para " +
            "edição.\"", SourceLine=107)]
        public virtual void RevogarItensEnviadosAoECAD_AAprovacaoFoiRevogadaEOItemLiberadoParaEdicao_()
        {
#line 100
this.RevogarItensEnviadosAoECAD("\"A aprovação foi revogada e o item liberado para edição.\"", ((string[])(null)));
#line hidden
        }
        
        public virtual void RevogarItensEnviadosAoUBEM(string mensagem, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revogar itens enviados ao UBEM", null, exampleTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
this.FeatureBackground();
#line 111
    testRunner.Given("que tenha uma Cue-Sheet cadastrada com dois pedidos gerados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 112
 testRunner.And("que tenha um item com pedido enviado para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 113
 testRunner.When("revogo o item com pedido enviado para pagamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 114
 testRunner.Then(string.Format("visualizo a mensagem que a aprovação foi revogada e os itens estão liberados para" +
                        " edição {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Revogar itens enviados ao UBEM, \"A aprovação foi revogada e o item liberado para " +
            "edição.\"", SourceLine=117)]
        public virtual void RevogarItensEnviadosAoUBEM_AAprovacaoFoiRevogadaEOItemLiberadoParaEdicao_()
        {
#line 110
this.RevogarItensEnviadosAoUBEM("\"A aprovação foi revogada e o item liberado para edição.\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
